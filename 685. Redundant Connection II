class DisjointSet{
public:
    vector<int>rank,parent, size;
    DisjointSet(int n){
        parent.resize(n+1);
        rank.resize(n+1,0);
        size.resize(n+1,1);
        for(int i = 0;i<=n;i++) {
            parent[i] = i;
        }
    }
    int findParent(int node){
        if(node == parent[node]) return node;
        return parent[node] = findParent(parent[node]);
    }
    bool unionByRank(int x, int y){
        int ulp_x = findParent(x);
        int ulp_y = findParent(y);
        if(ulp_x == ulp_y) return false;
        if(rank[ulp_x]>rank[ulp_y]){
            parent[ulp_y] = ulp_x;
        }
        else if(rank[ulp_y]>rank[ulp_x]){
            parent[ulp_x] = ulp_y; 
        }
        else{
            parent[ulp_y] = ulp_x;
            rank[ulp_x]++;
        }
        return true;
    }
    void unionBySize(int x,int y){
        int ulp_x = findParent(x);
        int ulp_y = findParent(y);
        if(ulp_x == ulp_y) return ;
        if(size[ulp_x]>=size[ulp_y]){
            size[ulp_x]+= size[ulp_y];
            parent[ulp_y] = ulp_x;
        }
        else{
            size[ulp_y]+= size[ulp_x];
            parent[ulp_x] = ulp_y;
        }
    }
};

class Solution {
public:
    vector<int> findRedundantDirectedConnection(vector<vector<int>>& edges) {
        int n = edges.size();
        vector<int>parent(n+1,0);
        vector<int>v1,v2;
        for(auto &e:edges){
            int u = e[0];
            int v = e[1];
            if(parent[v] == 0) parent[v] = u;
            else{
                v1 = {parent[v],v};
                v2 = {u,v};
                e[1] = 0;
            }
        }
        DisjointSet ds(n+1);
        for(auto &e:edges){
            int u = e[0];
            int v = e[1];
            if(v == 0) continue;
            if(ds.findParent(u) == ds.findParent(v)){
                if(v1.empty()) return {u,v};
                return v1;
            }
            else{
                ds.unionBySize(u,v);
            }
        }
        return v2;
    }
};
