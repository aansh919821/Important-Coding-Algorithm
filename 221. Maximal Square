class Solution {
public:
    int maximalSquare(vector<vector<char>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        // vector<vector<int>>v(n+1,vector<int>(m+1,0));
        // for(int i = 1;i<=n;i++){
        //     for(int j = 1;j<=m;j++){
        //         v[i][j] = v[i-1][j] + v[i][j-1] - v[i-1][j-1] + (matrix[i-1][j-1] - '0');
        //     }
        // }

        // int side = 0;
        // for(int i = 0;i<n;i++){
        //     for(int j = 0;j<m;j++){
        //         int maxi = min(n-i,m-j);
        //         for(int k = side+1;k<=maxi;k++){
        //             int ones = v[i+k][j+k] - v[i][j+k] - v[i+k][j] + v[i][j];
        //             if(ones == k*k) side = k;
        //             else break;
        //         }
        //     }
        // }
        // return side*side;
        vector<vector<int>>dp(n,vector<int>(m,0));
        int side = 0;
        for(int i = 0;i<n;i++){
            dp[i][0] = (matrix[i][0] == '1') ? 1 : 0;
            side = max(side,dp[i][0]);
        }
        for(int j = 0;j<m;j++){
            dp[0][j] = (matrix[0][j] == '1') ? 1 : 0;
            side = max(side,dp[0][j]);
        }
        for(int i = 1;i<n;i++){
            for(int j = 1;j<m;j++){
                if(matrix[i][j] == '1'){
                    dp[i][j] = 1 + min(dp[i-1][j-1],min(dp[i][j-1],dp[i-1][j])); 
                    side = max(side,dp[i][j]);
                }
            }
        }
        return side*side;
    }
};
