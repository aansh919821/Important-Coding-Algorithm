class Solution {
public:
    void dfs(int node, vector<int>&vis, vector<vector<int>>&adj){
        vis[node] = 1;
        for(auto it: adj[node]){
            if(!vis[it]){
                dfs(it,vis,adj);
            }
        }
        return;
    }
    int numberOfComponents(vector<vector<int>>& properties, int k) {
        int n = properties.size();
        vector<vector<int>>adj(n);
        vector<unordered_set<int>>arr(n);
        for(int i = 0;i<n;i++){
            arr[i] = unordered_set<int>(properties[i].begin(), properties[i].end());
        }
        for(int i = 0;i<n;i++){
            for(int j =i+1;j<n;j++){
                const auto& smaller = (arr[i].size()<arr[j].size()) ? arr[i] : arr[j];
                const auto& larger = (arr[i].size() <arr[j].size()) ? arr[j] : arr[i];
                int cnt =0;
                for(auto x:smaller){
                    if(larger.count(x)) cnt++;
                }
                if(cnt>=k){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int ans = 0;
        vector<int>vis(n,0);
        for(int i = 0;i<n;i++){
            if(!vis[i]) {
                dfs(i,vis,adj);
                ans++;
            }
        }
        return ans;

    }
};
