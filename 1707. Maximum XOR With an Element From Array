struct Node{
    Node* links[2];
    bool containsKey(int bit){
        return links[bit]!=NULL;
    }
    void put(int bit, Node* node){
        links[bit] = node; 
    }
    Node* get(int bit){
        return links[bit];
    }
};

class Trie{
    private: Node* root;
    public: 
    Trie(){
        root = new Node();
    }
    void insert(int num){
        Node* node = root;
        for(int i = 31;i>=0;i--){
            int bit = ((num>>i)&1);
            if(!node->containsKey(bit)){
                node->put(bit,  new Node());
            }
            node = node->get(bit);
        }
    }
    int getMax(int num){
        Node* node = root;
        int ans = 0;
        for(int i =31;i>=0;i--){
            int bit = ((num>>i)&1);
            if(node->containsKey(1-bit)){
                ans = (ans|(1<<i));
                node = node->get(1-bit);

            }
            else{
                node = node->get(bit);
            }
        }
        return ans;
    }
};

class Solution {
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        int n = nums.size();
        int m = queries.size();
        sort(nums.begin(), nums.end());
        vector<int>ans(m);
        Trie trie;
        vector<vector<int>>v(m,vector<int>(3));
        for(int i = 0;i<m;i++){
            int x = queries[i][0];
            int y = queries[i][1];
            int z = i;
            v[i][0] = x;
            v[i][1] = y;
            v[i][2] = z;
        }
        auto cmp = [](const vector<int>&a, const vector<int>&b){
            return a[1] <b[1];
        };
        sort(v.begin(), v.end(),cmp);
        int ind = 0;
        for(int i = 0;i<m;i++){
            int x = v[i][0];
            int y = v[i][1];
            int z = v[i][2];
            while(ind<n && nums[ind]<=y){
                trie.insert(nums[ind]);
                ind++;
            }
            if(ind == 0) ans[z] = -1;
            else ans[z] = trie.getMax(x);
        }
        return ans;
    }
};
