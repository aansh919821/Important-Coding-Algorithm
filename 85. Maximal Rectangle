class Solution {
public:
    int f(vector<int>&heights){
        int n = heights.size();
        vector<int>left(n), right(n);
        stack<int>st;
        for(int i = 0;i<n;i++){
            while(!st.empty() && heights[st.top()]>=heights[i]){
                st.pop();
            }
            left[i] = st.empty() ? -1 : st.top();
            st.push(i);
        }
        while(!st.empty()) st.pop();
        for(int i = n-1;i>=0;i--){
            while(!st.empty() && heights[st.top()]>=heights[i]) st.pop();
            right[i] = st.empty() ? n : st.top();
            st.push(i);
        }
        int maxA = 0;
        for(int i = 0;i<n;i++){
            maxA = max(maxA,heights[i]*(right[i] -left[i]-1));
        }
        return maxA;
    }
    int maximalRectangle(vector<vector<char>>& matrix) {
        int n = matrix.size();
        int m = matrix[0].size();
        vector<int>heights(m,0);
        int maxA = 0;
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                heights[j] = (matrix[i][j] == '1') ? heights[j]+1 :0;
            }
            maxA = max(maxA,f(heights));
        }
        return maxA;
    }
};
