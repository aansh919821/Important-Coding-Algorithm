//Leetcode 280
vector<int> wiggleSort(int n, vector<int> arr) {
    for(int i =1;i<n;i++){
        if(((i%2 == 1) && arr[i]<arr[i-1]) || ((i%2 == 0) && arr[i]>arr[i-1])){
            swap(arr[i], arr[i-1]);
        }
    }
    return arr;
}
//Leetcode 324
class Solution {
public:
    void wiggleSort(vector<int>& nums) {
        int n = nums.size();
        auto it = nums.begin() + n / 2;
        nth_element(nums.begin(), it, nums.end());
        int median = *it;

// index-rewiring
#define A(i) nums[(1 + 2 * i) % (n | 1)]

        for (int i = 0, j = 0, k = n - 1; i <= k;){
            if (A(i) > median)
                swap(A(i++), A(j++));
            else if (A(i) < median)
                swap(A(i), A(k--));
            else
                ++i;
        }
    }
};
