class Solution {
public:
    void dfs(int node,vector<vector<int>>&adj,unordered_set<int>&st,vector<int>&cl){
        for(auto it:adj[node]){
            if(cl[it] == 1 && !st.count(it)){
                st.insert(it);
                dfs(it,adj,st,cl);
            }
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& a) {
        int n = graph.size(), m = a.size();
        vector<vector<int>>adj(n);
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(graph[i][j] == 1 && i!=j){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        vector<int>cl(n,1);
        vector<vector<int>>arr(n);
        for(int i = 0;i<m;i++) cl[a[i]] = 0;
        for(int i = 0;i<m;i++){
            unordered_set<int>st;
            dfs(a[i],adj,st,cl);
            for(auto it:st){
                arr[it].push_back(a[i]);
            }
        }
        vector<int>cnt(n,0);
        for(int i = 0;i<n;i++) if(arr[i].size() == 1) cnt[arr[i][0]]++;
        int maxi = 0;
        int res = *min_element(a.begin(),a.end());
        for(int i = 0;i<m;i++){
            if(maxi<cnt[a[i]]){
                maxi = cnt[a[i]];
                res = a[i];
            }
            if(maxi == cnt[a[i]]){
                res = min(res,a[i]);
            }
        }
        return res;
    }
};
