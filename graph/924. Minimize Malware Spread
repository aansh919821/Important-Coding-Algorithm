class Solution {
public:
    void dfs(int node, vector<vector<int>>&adj,vector<int>&col,int &c){
        col[node] = c;
        for(auto it:adj[node]){
            if(col[it] == -1) dfs(it,adj,col,c);
        }
    }
    int minMalwareSpread(vector<vector<int>>& graph, vector<int>& initial) {
        int n = graph.size();
        vector<vector<int>>adj(n);
        for(int i = 0;i<n;i++){
            for(int j = 0;j<n;j++){
                if(graph[i][j] == 1 && i!=j){
                    adj[i].push_back(j);
                    adj[j].push_back(i);
                }
            }
        }
        int c = 0;
        vector<int>col(n,-1);
        for(int i = 0;i<n;i++){
            if(col[i]==-1){
                dfs(i,adj,col,c);
                c++;
            }
        }
        vector<int>sz(c,0), cnt(c,0);
        for(int i = 0;i<n;i++) sz[col[i]]++;
        for(auto node:initial) cnt[col[node]]++;
        int ans = 0, res = *min_element(initial.begin(),initial.end());
        for(auto node:initial){
            if(cnt[col[node]] == 1){
                if(ans<sz[col[node]]){
                    ans = sz[col[node]];
                    res = node;
                }
                if(ans == sz[col[node]]){
                    res = min(res,node);
                }
            }
        }
        return res;


    }
};
