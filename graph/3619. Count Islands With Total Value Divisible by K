class Solution {
public:
    int row[4] = {0,1,0,-1};
    int col[4] = {1,0,-1,0};
    void dfs(int r,int c, vector<vector<int>>&vis, vector<vector<int>>&grid, int &sum, int &k){
        int n = grid.size(), m = grid[0].size();
        vis[r][c] = 1;
        sum+= grid[r][c];
        sum = sum%k;
        for(int i =0;i<4;i++){
            int nr = r + row[i];
            int nc = c + col[i];
            if(nr<n && nr>=0 && nc<m && nc>=0 && !vis[nr][nc] && grid[nr][nc]!=0){
                dfs(nr,nc,vis,grid,sum,k);
            }
        }
    }
    int countIslands(vector<vector<int>>& grid, int k) {
        int n = grid.size();
        int m = grid[0].size();
        int ans = 0;
        vector<vector<int>>vis(n,vector<int>(m,0));
        for(int i = 0;i<n;i++){
            for(int j = 0;j<m;j++){
                if(!vis[i][j] && grid[i][j]!=0){
                    int sum = 0;
                    dfs(i,j,vis,grid,sum,k);
                    if(sum%k == 0) {
                        ans++;
                    }
                }
            }
        }
        return ans;
        
    }
};
